---
http_interactions:
- request:
    method: get
    uri: https://cdn.contentful.com/spaces/[CONTENTFUL_SPACE]/environments/master/sync?initial=true
    body:
      encoding: US-ASCII
      string: ''
    headers:
      X-Contentful-User-Agent:
      - sdk contentful.rb/2.9.3; platform ruby/2.5.1; os macOS/17;
      Authorization:
      - Bearer [CONTENTFUL_TOKEN]
      Content-Type:
      - application/vnd.contentful.delivery.v1+json
      Connection:
      - close
      Host:
      - cdn.contentful.com
      User-Agent:
      - http.rb/2.2.2
  response:
    status:
      code: 200
      message: OK
    headers:
      Access-Control-Allow-Headers:
      - Accept,Accept-Language,Authorization,Cache-Control,Content-Length,Content-Range,Content-Type,DNT,Destination,Expires,If-Match,If-Modified-Since,If-None-Match,Keep-Alive,Last-Modified,Origin,Pragma,Range,User-Agent,X-Http-Method-Override,X-Mx-ReqToken,X-Requested-With,X-Contentful-Version,X-Contentful-Content-Type,X-Contentful-Organization,X-Contentful-Skip-Transformation,X-Contentful-User-Agent,X-Contentful-Enable-Alpha-Feature
      Access-Control-Allow-Methods:
      - GET,HEAD,OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Etag
      Access-Control-Max-Age:
      - '86400'
      Cache-Control:
      - max-age=0
      Content-Type:
      - application/vnd.contentful.delivery.v1+json
      Contentful-Api:
      - cda_cached
      Etag:
      - W/"8b5343dea92b43d8947f245f7537d4c7"
      Server:
      - Contentful
      X-Content-Type-Options:
      - nosniff
      X-Contentful-Region:
      - us-east-1
      X-Contentful-Request-Id:
      - 6602b433047901b865b6c701256aa43b
      Content-Length:
      - '40470'
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 17 Oct 2018 16:06:35 GMT
      Via:
      - 1.1 varnish
      Age:
      - '11675'
      Connection:
      - close
      X-Served-By:
      - cache-ams4437-AMS
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539792396.824130,VS0,VE1
      Vary:
      - Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Oct 2018 16:06:33 GMT
recorded_with: VCR 4.0.0
